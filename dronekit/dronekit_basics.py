############## Dependecies ################
from dronekit import connect, VehicleMode, LocationGlobalRelative, APIException
### Standard packages ###
import time
import socket
from pymavlink import mavutil
#  import exceptions
import math
import argparse

############ Funcs ##################
def connectMyCopter():
    parser = argparse.ArgumentParser(description="command parser")
    parser.add_argument("--connect", "-c", required=False, help="ip address of device to connect to")
    args = parser.parse_args()

    # ip address specified
    connection_string = args.connect

    # if no ip given start a sitl instance
    if not connection_string:
        import dronekit_sitl
        sitl = dronekit_sitl.start_default()
        connection_string = sitl.connection_string()
   
    # vehicle object generated by dronekit connect func allows us to control the drone
    vehicle = connect(connection_string,wait_ready=True)

    return vehicle

def arm_and_takeoff(aTargetAltitude):
    """
    Arms vehicle and fly to aTargetAltitude.
    stolen from https://dronekit-python.readthedocs.io/en/latest/guide/taking_off.html
    """

    print("Basic pre-arm checks")
    # Don't try to arm until autopilot is ready
    while not vehicle.is_armable:
        print(" Waiting for vehicle to initialise...")
        time.sleep(1)

    print("Arming motors")
    # Copter should arm in GUIDED mode
    vehicle.mode    = VehicleMode("GUIDED")
    vehicle.armed   = True

    # Confirm vehicle armed before attempting to take off
    while not vehicle.armed:
        print(" Waiting for arming...")
        time.sleep(1)

    print("Taking off!")
    vehicle.simple_takeoff(aTargetAltitude) # Take off to target altitude

    # Wait until the vehicle reaches a safe height before processing the goto (otherwise the command
    #  after Vehicle.simple_takeoff will execute immediately).
    while True:
        print(" Altitude: ", vehicle.location.global_relative_frame.alt)
        #Break and return from function just below target altitude.
        if vehicle.location.global_relative_frame.alt>=aTargetAltitude*0.95:
            print("Reached target altitude")
            break
        time.sleep(1)

####### Movement (by velocity) ########## 
def set_velocity_body(Vx,Vy,Vz):
    # we control movement by setting velocity in the x,y,z coord system
    # we have to craft a mavlink msg from scratch to accomplish this
    msg = vehicle.message_factory.set_position_target_local_ned_encode(
            0,
            0,0,
            mavutil.mavlink.MAV_FRAME_BODY_OFFSET_NED,
            0b0000111111000111, # bitmask for velocity field of msg
            0, 0, 0, # position
            Vx,Vy,Vz, # velocity
            0, 0, 0, #acceleration
            0,0)
    vehicle.send_mavlink(msg)
    vehicle.flush()

# velocity command with +x being true NORTH of earth
def send_global_ned_velocity(Vx,Vy,Vz):
    # we control movement by setting velocity in the x,y,z coord system
    # we have to craft a mavlink msg from scratch to accomplish this
    msg = vehicle.message_factory.set_position_target_local_ned_encode(
            0,
            0,0,
            mavutil.mavlink.MAV_FRAME_LOCAL_NED, #frame
            0b0000111111000111, # bitmask for velocity field of msg
            0, 0, 0, # position
            Vx,Vy,Vz, # velocity
            0, 0, 0, #acceleration
            0,0)
    vehicle.send_mavlink(msg)
    vehicle.flush()

############ Main ##############
if __name__ == "__main__":
    vehicle = connectMyCopter()
    print(vehicle.mode)

    # lets do some basic fly in a circle stuff
    arm_and_takeoff(10)

    
    ################### MOVEMENT BY VELOCITY START #######################
    # mappings of directions velocity (position relative to front of drone)
    # +x = north (forward)
    # -x = south (backward)
    # +y = west (left)
    # -y = east (right)

    ############# Local Ned Velocity ################
    #  counter=0
    #  while counter < 20:
        #  set_velocity_body(1,0,0)
        #  print("Moving forward")
        #  time.sleep(1)
        #  counter+=1
#
    #  sleep so we can see progress
    #  time.sleep(1)
#
    #  counter=0
    #  while counter < 20:
        #  set_velocity_body(-1,0,0)
        #  print("Moving backward")
        #  time.sleep(1)
        #  counter+=1
#
    #  time.sleep(1)
#
    #  counter=0
    #  while counter < 20:
        #  set_velocity_body(0,1,0)
        #  print("Moving left")
        #  time.sleep(1)
        #  counter+=1
#
    #  time.sleep(1)
#
    #  counter=0
    #  while counter < 20:
        #  set_velocity_body(0,-1,0)
        #  print("Moving right")
        #  time.sleep(1)
        #  counter+=1
#
    ############ global Ned Velocity ################
    #  counter=0
    #  while counter < 20:
        #  send_global_ned_velocity(1,0,0)
        #  print("Moving forward")
        #  time.sleep(1)
        #  counter+=1
#
    #  sleep so we can see progress
    #  time.sleep(1)
#
    #  counter=0
    #  while counter < 20:
        #  send_global_ned_velocity(-1,0,0)
        #  print("Moving backward")
        #  time.sleep(1)
        #  counter+=1
#
    #  time.sleep(1)
#
    #  counter=0
    #  while counter < 20:
        #  send_global_ned_velocity(0,1,0)
        #  print("Moving left")
        #  time.sleep(1)
        #  counter+=1
#
    #  time.sleep(1)
#
    #  counter=0
    #  while counter < 20:
        #  send_global_ned_velocity(0,-1,0)
        #  print("Moving right")
        #  time.sleep(1)
        #  counter+=1
#
#
    #  vehicle.mode = VehicleMode("RTL")
#
    #  print("Movement Finished")
    #  print(vehicle.version)
    ################### MOVEMENT BY VELOCITY END #######################

    ################### MOVEMENT BY SIMPLE_GOTO/AIRSPEED START #######################
    print("Set default/target airspeed to 3")
    vehicle.airspeed = 3

    print("Going towards first point for 30 seconds ...")
    point1 = LocationGlobalRelative(-35.361354, 149.165218, 20)
    vehicle.simple_goto(point1)

    # sleep so we can see the change in map
    time.sleep(30)

    print("Going towards second point for 30 seconds (groundspeed set to 10 m/s) ...")
    point2 = LocationGlobalRelative(-35.363244, 149.168801, 20)
    vehicle.simple_goto(point2, groundspeed=10)

    # sleep so we can see the change in map
    time.sleep(30)

    print("Returning to Launch")
    vehicle.mode = VehicleMode("RTL")

    # Close vehicle object before exiting script
    print("Close vehicle object")
    vehicle.close()

    ################### MOVEMENT BY SIMPLE_GOTO/AIRSPEED END #######################
